/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.airqo.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Measurement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9047251391685751426L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Measurement\",\"namespace\":\"net.airqo.models\",\"fields\":[{\"name\":\"frequency\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"device\",\"type\":\"string\"},{\"name\":\"tenant\",\"type\":\"string\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"location\",\"fields\":[{\"name\":\"latitude\",\"type\":[\"double\",\"null\"]},{\"name\":\"longitude\",\"type\":[\"double\",\"null\"]}]}},{\"name\":\"internalTemperature\",\"type\":{\"type\":\"record\",\"name\":\"internalTemperature\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}},{\"name\":\"internalHumidity\",\"type\":{\"type\":\"record\",\"name\":\"internalHumidity\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}},{\"name\":\"pm10\",\"type\":{\"type\":\"record\",\"name\":\"pm10\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}},{\"name\":\"pm2_5\",\"type\":{\"type\":\"record\",\"name\":\"pm2_5\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}},{\"name\":\"no2\",\"type\":{\"type\":\"record\",\"name\":\"no2\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}},{\"name\":\"pm1\",\"type\":{\"type\":\"record\",\"name\":\"pm1\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Measurement> ENCODER =
      new BinaryMessageEncoder<Measurement>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Measurement> DECODER =
      new BinaryMessageDecoder<Measurement>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Measurement> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Measurement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Measurement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Measurement>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Measurement to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Measurement from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Measurement instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Measurement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence frequency;
   private java.lang.CharSequence time;
   private java.lang.CharSequence device;
   private java.lang.CharSequence tenant;
   private net.airqo.models.location location;
   private net.airqo.models.internalTemperature internalTemperature;
   private net.airqo.models.internalHumidity internalHumidity;
   private net.airqo.models.pm10 pm10;
   private net.airqo.models.pm2_5 pm2_5;
   private net.airqo.models.no2 no2;
   private net.airqo.models.pm1 pm1;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Measurement() {}

  /**
   * All-args constructor.
   * @param frequency The new value for frequency
   * @param time The new value for time
   * @param device The new value for device
   * @param tenant The new value for tenant
   * @param location The new value for location
   * @param internalTemperature The new value for internalTemperature
   * @param internalHumidity The new value for internalHumidity
   * @param pm10 The new value for pm10
   * @param pm2_5 The new value for pm2_5
   * @param no2 The new value for no2
   * @param pm1 The new value for pm1
   */
  public Measurement(java.lang.CharSequence frequency, java.lang.CharSequence time, java.lang.CharSequence device, java.lang.CharSequence tenant, net.airqo.models.location location, net.airqo.models.internalTemperature internalTemperature, net.airqo.models.internalHumidity internalHumidity, net.airqo.models.pm10 pm10, net.airqo.models.pm2_5 pm2_5, net.airqo.models.no2 no2, net.airqo.models.pm1 pm1) {
    this.frequency = frequency;
    this.time = time;
    this.device = device;
    this.tenant = tenant;
    this.location = location;
    this.internalTemperature = internalTemperature;
    this.internalHumidity = internalHumidity;
    this.pm10 = pm10;
    this.pm2_5 = pm2_5;
    this.no2 = no2;
    this.pm1 = pm1;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return frequency;
    case 1: return time;
    case 2: return device;
    case 3: return tenant;
    case 4: return location;
    case 5: return internalTemperature;
    case 6: return internalHumidity;
    case 7: return pm10;
    case 8: return pm2_5;
    case 9: return no2;
    case 10: return pm1;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: frequency = (java.lang.CharSequence)value$; break;
    case 1: time = (java.lang.CharSequence)value$; break;
    case 2: device = (java.lang.CharSequence)value$; break;
    case 3: tenant = (java.lang.CharSequence)value$; break;
    case 4: location = (net.airqo.models.location)value$; break;
    case 5: internalTemperature = (net.airqo.models.internalTemperature)value$; break;
    case 6: internalHumidity = (net.airqo.models.internalHumidity)value$; break;
    case 7: pm10 = (net.airqo.models.pm10)value$; break;
    case 8: pm2_5 = (net.airqo.models.pm2_5)value$; break;
    case 9: no2 = (net.airqo.models.no2)value$; break;
    case 10: pm1 = (net.airqo.models.pm1)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return The value of the 'frequency' field.
   */
  public java.lang.CharSequence getFrequency() {
    return frequency;
  }


  /**
   * Sets the value of the 'frequency' field.
   * @param value the value to set.
   */
  public void setFrequency(java.lang.CharSequence value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.CharSequence getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'device' field.
   * @return The value of the 'device' field.
   */
  public java.lang.CharSequence getDevice() {
    return device;
  }


  /**
   * Sets the value of the 'device' field.
   * @param value the value to set.
   */
  public void setDevice(java.lang.CharSequence value) {
    this.device = value;
  }

  /**
   * Gets the value of the 'tenant' field.
   * @return The value of the 'tenant' field.
   */
  public java.lang.CharSequence getTenant() {
    return tenant;
  }


  /**
   * Sets the value of the 'tenant' field.
   * @param value the value to set.
   */
  public void setTenant(java.lang.CharSequence value) {
    this.tenant = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public net.airqo.models.location getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(net.airqo.models.location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'internalTemperature' field.
   * @return The value of the 'internalTemperature' field.
   */
  public net.airqo.models.internalTemperature getInternalTemperature() {
    return internalTemperature;
  }


  /**
   * Sets the value of the 'internalTemperature' field.
   * @param value the value to set.
   */
  public void setInternalTemperature(net.airqo.models.internalTemperature value) {
    this.internalTemperature = value;
  }

  /**
   * Gets the value of the 'internalHumidity' field.
   * @return The value of the 'internalHumidity' field.
   */
  public net.airqo.models.internalHumidity getInternalHumidity() {
    return internalHumidity;
  }


  /**
   * Sets the value of the 'internalHumidity' field.
   * @param value the value to set.
   */
  public void setInternalHumidity(net.airqo.models.internalHumidity value) {
    this.internalHumidity = value;
  }

  /**
   * Gets the value of the 'pm10' field.
   * @return The value of the 'pm10' field.
   */
  public net.airqo.models.pm10 getPm10() {
    return pm10;
  }


  /**
   * Sets the value of the 'pm10' field.
   * @param value the value to set.
   */
  public void setPm10(net.airqo.models.pm10 value) {
    this.pm10 = value;
  }

  /**
   * Gets the value of the 'pm2_5' field.
   * @return The value of the 'pm2_5' field.
   */
  public net.airqo.models.pm2_5 getPm25() {
    return pm2_5;
  }


  /**
   * Sets the value of the 'pm2_5' field.
   * @param value the value to set.
   */
  public void setPm25(net.airqo.models.pm2_5 value) {
    this.pm2_5 = value;
  }

  /**
   * Gets the value of the 'no2' field.
   * @return The value of the 'no2' field.
   */
  public net.airqo.models.no2 getNo2() {
    return no2;
  }


  /**
   * Sets the value of the 'no2' field.
   * @param value the value to set.
   */
  public void setNo2(net.airqo.models.no2 value) {
    this.no2 = value;
  }

  /**
   * Gets the value of the 'pm1' field.
   * @return The value of the 'pm1' field.
   */
  public net.airqo.models.pm1 getPm1() {
    return pm1;
  }


  /**
   * Sets the value of the 'pm1' field.
   * @param value the value to set.
   */
  public void setPm1(net.airqo.models.pm1 value) {
    this.pm1 = value;
  }

  /**
   * Creates a new Measurement RecordBuilder.
   * @return A new Measurement RecordBuilder
   */
  public static net.airqo.models.Measurement.Builder newBuilder() {
    return new net.airqo.models.Measurement.Builder();
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Measurement RecordBuilder
   */
  public static net.airqo.models.Measurement.Builder newBuilder(net.airqo.models.Measurement.Builder other) {
    if (other == null) {
      return new net.airqo.models.Measurement.Builder();
    } else {
      return new net.airqo.models.Measurement.Builder(other);
    }
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Measurement instance.
   * @param other The existing instance to copy.
   * @return A new Measurement RecordBuilder
   */
  public static net.airqo.models.Measurement.Builder newBuilder(net.airqo.models.Measurement other) {
    if (other == null) {
      return new net.airqo.models.Measurement.Builder();
    } else {
      return new net.airqo.models.Measurement.Builder(other);
    }
  }

  /**
   * RecordBuilder for Measurement instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Measurement>
    implements org.apache.avro.data.RecordBuilder<Measurement> {

    private java.lang.CharSequence frequency;
    private java.lang.CharSequence time;
    private java.lang.CharSequence device;
    private java.lang.CharSequence tenant;
    private net.airqo.models.location location;
    private net.airqo.models.location.Builder locationBuilder;
    private net.airqo.models.internalTemperature internalTemperature;
    private net.airqo.models.internalTemperature.Builder internalTemperatureBuilder;
    private net.airqo.models.internalHumidity internalHumidity;
    private net.airqo.models.internalHumidity.Builder internalHumidityBuilder;
    private net.airqo.models.pm10 pm10;
    private net.airqo.models.pm10.Builder pm10Builder;
    private net.airqo.models.pm2_5 pm2_5;
    private net.airqo.models.pm2_5.Builder pm2_5Builder;
    private net.airqo.models.no2 no2;
    private net.airqo.models.no2.Builder no2Builder;
    private net.airqo.models.pm1 pm1;
    private net.airqo.models.pm1.Builder pm1Builder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.airqo.models.Measurement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.frequency)) {
        this.frequency = data().deepCopy(fields()[0].schema(), other.frequency);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.device)) {
        this.device = data().deepCopy(fields()[2].schema(), other.device);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tenant)) {
        this.tenant = data().deepCopy(fields()[3].schema(), other.tenant);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.location)) {
        this.location = data().deepCopy(fields()[4].schema(), other.location);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = net.airqo.models.location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[5], other.internalTemperature)) {
        this.internalTemperature = data().deepCopy(fields()[5].schema(), other.internalTemperature);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasInternalTemperatureBuilder()) {
        this.internalTemperatureBuilder = net.airqo.models.internalTemperature.newBuilder(other.getInternalTemperatureBuilder());
      }
      if (isValidValue(fields()[6], other.internalHumidity)) {
        this.internalHumidity = data().deepCopy(fields()[6].schema(), other.internalHumidity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasInternalHumidityBuilder()) {
        this.internalHumidityBuilder = net.airqo.models.internalHumidity.newBuilder(other.getInternalHumidityBuilder());
      }
      if (isValidValue(fields()[7], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[7].schema(), other.pm10);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasPm10Builder()) {
        this.pm10Builder = net.airqo.models.pm10.newBuilder(other.getPm10Builder());
      }
      if (isValidValue(fields()[8], other.pm2_5)) {
        this.pm2_5 = data().deepCopy(fields()[8].schema(), other.pm2_5);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasPm25Builder()) {
        this.pm2_5Builder = net.airqo.models.pm2_5.newBuilder(other.getPm25Builder());
      }
      if (isValidValue(fields()[9], other.no2)) {
        this.no2 = data().deepCopy(fields()[9].schema(), other.no2);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasNo2Builder()) {
        this.no2Builder = net.airqo.models.no2.newBuilder(other.getNo2Builder());
      }
      if (isValidValue(fields()[10], other.pm1)) {
        this.pm1 = data().deepCopy(fields()[10].schema(), other.pm1);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasPm1Builder()) {
        this.pm1Builder = net.airqo.models.pm1.newBuilder(other.getPm1Builder());
      }
    }

    /**
     * Creates a Builder by copying an existing Measurement instance
     * @param other The existing instance to copy.
     */
    private Builder(net.airqo.models.Measurement other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.frequency)) {
        this.frequency = data().deepCopy(fields()[0].schema(), other.frequency);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.device)) {
        this.device = data().deepCopy(fields()[2].schema(), other.device);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tenant)) {
        this.tenant = data().deepCopy(fields()[3].schema(), other.tenant);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.location)) {
        this.location = data().deepCopy(fields()[4].schema(), other.location);
        fieldSetFlags()[4] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[5], other.internalTemperature)) {
        this.internalTemperature = data().deepCopy(fields()[5].schema(), other.internalTemperature);
        fieldSetFlags()[5] = true;
      }
      this.internalTemperatureBuilder = null;
      if (isValidValue(fields()[6], other.internalHumidity)) {
        this.internalHumidity = data().deepCopy(fields()[6].schema(), other.internalHumidity);
        fieldSetFlags()[6] = true;
      }
      this.internalHumidityBuilder = null;
      if (isValidValue(fields()[7], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[7].schema(), other.pm10);
        fieldSetFlags()[7] = true;
      }
      this.pm10Builder = null;
      if (isValidValue(fields()[8], other.pm2_5)) {
        this.pm2_5 = data().deepCopy(fields()[8].schema(), other.pm2_5);
        fieldSetFlags()[8] = true;
      }
      this.pm2_5Builder = null;
      if (isValidValue(fields()[9], other.no2)) {
        this.no2 = data().deepCopy(fields()[9].schema(), other.no2);
        fieldSetFlags()[9] = true;
      }
      this.no2Builder = null;
      if (isValidValue(fields()[10], other.pm1)) {
        this.pm1 = data().deepCopy(fields()[10].schema(), other.pm1);
        fieldSetFlags()[10] = true;
      }
      this.pm1Builder = null;
    }

    /**
      * Gets the value of the 'frequency' field.
      * @return The value.
      */
    public java.lang.CharSequence getFrequency() {
      return frequency;
    }


    /**
      * Sets the value of the 'frequency' field.
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setFrequency(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.frequency = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'frequency' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearFrequency() {
      frequency = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'device' field.
      * @return The value.
      */
    public java.lang.CharSequence getDevice() {
      return device;
    }


    /**
      * Sets the value of the 'device' field.
      * @param value The value of 'device'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setDevice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.device = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'device' field has been set.
      * @return True if the 'device' field has been set, false otherwise.
      */
    public boolean hasDevice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'device' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearDevice() {
      device = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant' field.
      * @return The value.
      */
    public java.lang.CharSequence getTenant() {
      return tenant;
    }


    /**
      * Sets the value of the 'tenant' field.
      * @param value The value of 'tenant'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setTenant(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tenant = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant' field has been set.
      * @return True if the 'tenant' field has been set, false otherwise.
      */
    public boolean hasTenant() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tenant' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearTenant() {
      tenant = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public net.airqo.models.location getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setLocation(net.airqo.models.location value) {
      validate(fields()[4], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(net.airqo.models.location.newBuilder(location));
        } else {
          setLocationBuilder(net.airqo.models.location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setLocationBuilder(net.airqo.models.location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'internalTemperature' field.
      * @return The value.
      */
    public net.airqo.models.internalTemperature getInternalTemperature() {
      return internalTemperature;
    }


    /**
      * Sets the value of the 'internalTemperature' field.
      * @param value The value of 'internalTemperature'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setInternalTemperature(net.airqo.models.internalTemperature value) {
      validate(fields()[5], value);
      this.internalTemperatureBuilder = null;
      this.internalTemperature = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'internalTemperature' field has been set.
      * @return True if the 'internalTemperature' field has been set, false otherwise.
      */
    public boolean hasInternalTemperature() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'internalTemperature' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.internalTemperature.Builder getInternalTemperatureBuilder() {
      if (internalTemperatureBuilder == null) {
        if (hasInternalTemperature()) {
          setInternalTemperatureBuilder(net.airqo.models.internalTemperature.newBuilder(internalTemperature));
        } else {
          setInternalTemperatureBuilder(net.airqo.models.internalTemperature.newBuilder());
        }
      }
      return internalTemperatureBuilder;
    }

    /**
     * Sets the Builder instance for the 'internalTemperature' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setInternalTemperatureBuilder(net.airqo.models.internalTemperature.Builder value) {
      clearInternalTemperature();
      internalTemperatureBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'internalTemperature' field has an active Builder instance
     * @return True if the 'internalTemperature' field has an active Builder instance
     */
    public boolean hasInternalTemperatureBuilder() {
      return internalTemperatureBuilder != null;
    }

    /**
      * Clears the value of the 'internalTemperature' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearInternalTemperature() {
      internalTemperature = null;
      internalTemperatureBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'internalHumidity' field.
      * @return The value.
      */
    public net.airqo.models.internalHumidity getInternalHumidity() {
      return internalHumidity;
    }


    /**
      * Sets the value of the 'internalHumidity' field.
      * @param value The value of 'internalHumidity'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setInternalHumidity(net.airqo.models.internalHumidity value) {
      validate(fields()[6], value);
      this.internalHumidityBuilder = null;
      this.internalHumidity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'internalHumidity' field has been set.
      * @return True if the 'internalHumidity' field has been set, false otherwise.
      */
    public boolean hasInternalHumidity() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'internalHumidity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.internalHumidity.Builder getInternalHumidityBuilder() {
      if (internalHumidityBuilder == null) {
        if (hasInternalHumidity()) {
          setInternalHumidityBuilder(net.airqo.models.internalHumidity.newBuilder(internalHumidity));
        } else {
          setInternalHumidityBuilder(net.airqo.models.internalHumidity.newBuilder());
        }
      }
      return internalHumidityBuilder;
    }

    /**
     * Sets the Builder instance for the 'internalHumidity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setInternalHumidityBuilder(net.airqo.models.internalHumidity.Builder value) {
      clearInternalHumidity();
      internalHumidityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'internalHumidity' field has an active Builder instance
     * @return True if the 'internalHumidity' field has an active Builder instance
     */
    public boolean hasInternalHumidityBuilder() {
      return internalHumidityBuilder != null;
    }

    /**
      * Clears the value of the 'internalHumidity' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearInternalHumidity() {
      internalHumidity = null;
      internalHumidityBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm10' field.
      * @return The value.
      */
    public net.airqo.models.pm10 getPm10() {
      return pm10;
    }


    /**
      * Sets the value of the 'pm10' field.
      * @param value The value of 'pm10'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setPm10(net.airqo.models.pm10 value) {
      validate(fields()[7], value);
      this.pm10Builder = null;
      this.pm10 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'pm10' field has been set.
      * @return True if the 'pm10' field has been set, false otherwise.
      */
    public boolean hasPm10() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'pm10' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.pm10.Builder getPm10Builder() {
      if (pm10Builder == null) {
        if (hasPm10()) {
          setPm10Builder(net.airqo.models.pm10.newBuilder(pm10));
        } else {
          setPm10Builder(net.airqo.models.pm10.newBuilder());
        }
      }
      return pm10Builder;
    }

    /**
     * Sets the Builder instance for the 'pm10' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setPm10Builder(net.airqo.models.pm10.Builder value) {
      clearPm10();
      pm10Builder = value;
      return this;
    }

    /**
     * Checks whether the 'pm10' field has an active Builder instance
     * @return True if the 'pm10' field has an active Builder instance
     */
    public boolean hasPm10Builder() {
      return pm10Builder != null;
    }

    /**
      * Clears the value of the 'pm10' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearPm10() {
      pm10 = null;
      pm10Builder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm2_5' field.
      * @return The value.
      */
    public net.airqo.models.pm2_5 getPm25() {
      return pm2_5;
    }


    /**
      * Sets the value of the 'pm2_5' field.
      * @param value The value of 'pm2_5'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setPm25(net.airqo.models.pm2_5 value) {
      validate(fields()[8], value);
      this.pm2_5Builder = null;
      this.pm2_5 = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'pm2_5' field has been set.
      * @return True if the 'pm2_5' field has been set, false otherwise.
      */
    public boolean hasPm25() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'pm2_5' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.pm2_5.Builder getPm25Builder() {
      if (pm2_5Builder == null) {
        if (hasPm25()) {
          setPm25Builder(net.airqo.models.pm2_5.newBuilder(pm2_5));
        } else {
          setPm25Builder(net.airqo.models.pm2_5.newBuilder());
        }
      }
      return pm2_5Builder;
    }

    /**
     * Sets the Builder instance for the 'pm2_5' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setPm25Builder(net.airqo.models.pm2_5.Builder value) {
      clearPm25();
      pm2_5Builder = value;
      return this;
    }

    /**
     * Checks whether the 'pm2_5' field has an active Builder instance
     * @return True if the 'pm2_5' field has an active Builder instance
     */
    public boolean hasPm25Builder() {
      return pm2_5Builder != null;
    }

    /**
      * Clears the value of the 'pm2_5' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearPm25() {
      pm2_5 = null;
      pm2_5Builder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'no2' field.
      * @return The value.
      */
    public net.airqo.models.no2 getNo2() {
      return no2;
    }


    /**
      * Sets the value of the 'no2' field.
      * @param value The value of 'no2'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setNo2(net.airqo.models.no2 value) {
      validate(fields()[9], value);
      this.no2Builder = null;
      this.no2 = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'no2' field has been set.
      * @return True if the 'no2' field has been set, false otherwise.
      */
    public boolean hasNo2() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'no2' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.no2.Builder getNo2Builder() {
      if (no2Builder == null) {
        if (hasNo2()) {
          setNo2Builder(net.airqo.models.no2.newBuilder(no2));
        } else {
          setNo2Builder(net.airqo.models.no2.newBuilder());
        }
      }
      return no2Builder;
    }

    /**
     * Sets the Builder instance for the 'no2' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setNo2Builder(net.airqo.models.no2.Builder value) {
      clearNo2();
      no2Builder = value;
      return this;
    }

    /**
     * Checks whether the 'no2' field has an active Builder instance
     * @return True if the 'no2' field has an active Builder instance
     */
    public boolean hasNo2Builder() {
      return no2Builder != null;
    }

    /**
      * Clears the value of the 'no2' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearNo2() {
      no2 = null;
      no2Builder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm1' field.
      * @return The value.
      */
    public net.airqo.models.pm1 getPm1() {
      return pm1;
    }


    /**
      * Sets the value of the 'pm1' field.
      * @param value The value of 'pm1'.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder setPm1(net.airqo.models.pm1 value) {
      validate(fields()[10], value);
      this.pm1Builder = null;
      this.pm1 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'pm1' field has been set.
      * @return True if the 'pm1' field has been set, false otherwise.
      */
    public boolean hasPm1() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'pm1' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public net.airqo.models.pm1.Builder getPm1Builder() {
      if (pm1Builder == null) {
        if (hasPm1()) {
          setPm1Builder(net.airqo.models.pm1.newBuilder(pm1));
        } else {
          setPm1Builder(net.airqo.models.pm1.newBuilder());
        }
      }
      return pm1Builder;
    }

    /**
     * Sets the Builder instance for the 'pm1' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.airqo.models.Measurement.Builder setPm1Builder(net.airqo.models.pm1.Builder value) {
      clearPm1();
      pm1Builder = value;
      return this;
    }

    /**
     * Checks whether the 'pm1' field has an active Builder instance
     * @return True if the 'pm1' field has an active Builder instance
     */
    public boolean hasPm1Builder() {
      return pm1Builder != null;
    }

    /**
      * Clears the value of the 'pm1' field.
      * @return This builder.
      */
    public net.airqo.models.Measurement.Builder clearPm1() {
      pm1 = null;
      pm1Builder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Measurement build() {
      try {
        Measurement record = new Measurement();
        record.frequency = fieldSetFlags()[0] ? this.frequency : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.device = fieldSetFlags()[2] ? this.device : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tenant = fieldSetFlags()[3] ? this.tenant : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[4] ? this.location : (net.airqo.models.location) defaultValue(fields()[4]);
        }
        if (internalTemperatureBuilder != null) {
          try {
            record.internalTemperature = this.internalTemperatureBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("internalTemperature"));
            throw e;
          }
        } else {
          record.internalTemperature = fieldSetFlags()[5] ? this.internalTemperature : (net.airqo.models.internalTemperature) defaultValue(fields()[5]);
        }
        if (internalHumidityBuilder != null) {
          try {
            record.internalHumidity = this.internalHumidityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("internalHumidity"));
            throw e;
          }
        } else {
          record.internalHumidity = fieldSetFlags()[6] ? this.internalHumidity : (net.airqo.models.internalHumidity) defaultValue(fields()[6]);
        }
        if (pm10Builder != null) {
          try {
            record.pm10 = this.pm10Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pm10"));
            throw e;
          }
        } else {
          record.pm10 = fieldSetFlags()[7] ? this.pm10 : (net.airqo.models.pm10) defaultValue(fields()[7]);
        }
        if (pm2_5Builder != null) {
          try {
            record.pm2_5 = this.pm2_5Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pm2_5"));
            throw e;
          }
        } else {
          record.pm2_5 = fieldSetFlags()[8] ? this.pm2_5 : (net.airqo.models.pm2_5) defaultValue(fields()[8]);
        }
        if (no2Builder != null) {
          try {
            record.no2 = this.no2Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("no2"));
            throw e;
          }
        } else {
          record.no2 = fieldSetFlags()[9] ? this.no2 : (net.airqo.models.no2) defaultValue(fields()[9]);
        }
        if (pm1Builder != null) {
          try {
            record.pm1 = this.pm1Builder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("pm1"));
            throw e;
          }
        } else {
          record.pm1 = fieldSetFlags()[10] ? this.pm1 : (net.airqo.models.pm1) defaultValue(fields()[10]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Measurement>
    WRITER$ = (org.apache.avro.io.DatumWriter<Measurement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Measurement>
    READER$ = (org.apache.avro.io.DatumReader<Measurement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.frequency);

    out.writeString(this.time);

    out.writeString(this.device);

    out.writeString(this.tenant);

    this.location.customEncode(out);

    this.internalTemperature.customEncode(out);

    this.internalHumidity.customEncode(out);

    this.pm10.customEncode(out);

    this.pm2_5.customEncode(out);

    this.no2.customEncode(out);

    this.pm1.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.frequency = in.readString(this.frequency instanceof Utf8 ? (Utf8)this.frequency : null);

      this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);

      this.device = in.readString(this.device instanceof Utf8 ? (Utf8)this.device : null);

      this.tenant = in.readString(this.tenant instanceof Utf8 ? (Utf8)this.tenant : null);

      if (this.location == null) {
        this.location = new net.airqo.models.location();
      }
      this.location.customDecode(in);

      if (this.internalTemperature == null) {
        this.internalTemperature = new net.airqo.models.internalTemperature();
      }
      this.internalTemperature.customDecode(in);

      if (this.internalHumidity == null) {
        this.internalHumidity = new net.airqo.models.internalHumidity();
      }
      this.internalHumidity.customDecode(in);

      if (this.pm10 == null) {
        this.pm10 = new net.airqo.models.pm10();
      }
      this.pm10.customDecode(in);

      if (this.pm2_5 == null) {
        this.pm2_5 = new net.airqo.models.pm2_5();
      }
      this.pm2_5.customDecode(in);

      if (this.no2 == null) {
        this.no2 = new net.airqo.models.no2();
      }
      this.no2.customDecode(in);

      if (this.pm1 == null) {
        this.pm1 = new net.airqo.models.pm1();
      }
      this.pm1.customDecode(in);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.frequency = in.readString(this.frequency instanceof Utf8 ? (Utf8)this.frequency : null);
          break;

        case 1:
          this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);
          break;

        case 2:
          this.device = in.readString(this.device instanceof Utf8 ? (Utf8)this.device : null);
          break;

        case 3:
          this.tenant = in.readString(this.tenant instanceof Utf8 ? (Utf8)this.tenant : null);
          break;

        case 4:
          if (this.location == null) {
            this.location = new net.airqo.models.location();
          }
          this.location.customDecode(in);
          break;

        case 5:
          if (this.internalTemperature == null) {
            this.internalTemperature = new net.airqo.models.internalTemperature();
          }
          this.internalTemperature.customDecode(in);
          break;

        case 6:
          if (this.internalHumidity == null) {
            this.internalHumidity = new net.airqo.models.internalHumidity();
          }
          this.internalHumidity.customDecode(in);
          break;

        case 7:
          if (this.pm10 == null) {
            this.pm10 = new net.airqo.models.pm10();
          }
          this.pm10.customDecode(in);
          break;

        case 8:
          if (this.pm2_5 == null) {
            this.pm2_5 = new net.airqo.models.pm2_5();
          }
          this.pm2_5.customDecode(in);
          break;

        case 9:
          if (this.no2 == null) {
            this.no2 = new net.airqo.models.no2();
          }
          this.no2.customDecode(in);
          break;

        case 10:
          if (this.pm1 == null) {
            this.pm1 = new net.airqo.models.pm1();
          }
          this.pm1.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










