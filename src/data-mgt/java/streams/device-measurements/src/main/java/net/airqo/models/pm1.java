/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.airqo.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class pm1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1622084447214032133L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"pm1\",\"namespace\":\"net.airqo.models\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"]},{\"name\":\"calibratedValue\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<pm1> ENCODER =
      new BinaryMessageEncoder<pm1>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<pm1> DECODER =
      new BinaryMessageDecoder<pm1>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<pm1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<pm1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<pm1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<pm1>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this pm1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a pm1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a pm1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static pm1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Double value;
   private java.lang.Double calibratedValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public pm1() {}

  /**
   * All-args constructor.
   * @param value The new value for value
   * @param calibratedValue The new value for calibratedValue
   */
  public pm1(java.lang.Double value, java.lang.Double calibratedValue) {
    this.value = value;
    this.calibratedValue = calibratedValue;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return calibratedValue;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.lang.Double)value$; break;
    case 1: calibratedValue = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Double getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'calibratedValue' field.
   * @return The value of the 'calibratedValue' field.
   */
  public java.lang.Double getCalibratedValue() {
    return calibratedValue;
  }


  /**
   * Sets the value of the 'calibratedValue' field.
   * @param value the value to set.
   */
  public void setCalibratedValue(java.lang.Double value) {
    this.calibratedValue = value;
  }

  /**
   * Creates a new pm1 RecordBuilder.
   * @return A new pm1 RecordBuilder
   */
  public static net.airqo.models.pm1.Builder newBuilder() {
    return new net.airqo.models.pm1.Builder();
  }

  /**
   * Creates a new pm1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new pm1 RecordBuilder
   */
  public static net.airqo.models.pm1.Builder newBuilder(net.airqo.models.pm1.Builder other) {
    if (other == null) {
      return new net.airqo.models.pm1.Builder();
    } else {
      return new net.airqo.models.pm1.Builder(other);
    }
  }

  /**
   * Creates a new pm1 RecordBuilder by copying an existing pm1 instance.
   * @param other The existing instance to copy.
   * @return A new pm1 RecordBuilder
   */
  public static net.airqo.models.pm1.Builder newBuilder(net.airqo.models.pm1 other) {
    if (other == null) {
      return new net.airqo.models.pm1.Builder();
    } else {
      return new net.airqo.models.pm1.Builder(other);
    }
  }

  /**
   * RecordBuilder for pm1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<pm1>
    implements org.apache.avro.data.RecordBuilder<pm1> {

    private java.lang.Double value;
    private java.lang.Double calibratedValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.airqo.models.pm1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.calibratedValue)) {
        this.calibratedValue = data().deepCopy(fields()[1].schema(), other.calibratedValue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing pm1 instance
     * @param other The existing instance to copy.
     */
    private Builder(net.airqo.models.pm1 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.calibratedValue)) {
        this.calibratedValue = data().deepCopy(fields()[1].schema(), other.calibratedValue);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Double getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public net.airqo.models.pm1.Builder setValue(java.lang.Double value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public net.airqo.models.pm1.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'calibratedValue' field.
      * @return The value.
      */
    public java.lang.Double getCalibratedValue() {
      return calibratedValue;
    }


    /**
      * Sets the value of the 'calibratedValue' field.
      * @param value The value of 'calibratedValue'.
      * @return This builder.
      */
    public net.airqo.models.pm1.Builder setCalibratedValue(java.lang.Double value) {
      validate(fields()[1], value);
      this.calibratedValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'calibratedValue' field has been set.
      * @return True if the 'calibratedValue' field has been set, false otherwise.
      */
    public boolean hasCalibratedValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'calibratedValue' field.
      * @return This builder.
      */
    public net.airqo.models.pm1.Builder clearCalibratedValue() {
      calibratedValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public pm1 build() {
      try {
        pm1 record = new pm1();
        record.value = fieldSetFlags()[0] ? this.value : (java.lang.Double) defaultValue(fields()[0]);
        record.calibratedValue = fieldSetFlags()[1] ? this.calibratedValue : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<pm1>
    WRITER$ = (org.apache.avro.io.DatumWriter<pm1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<pm1>
    READER$ = (org.apache.avro.io.DatumReader<pm1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.value == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.value);
    }

    if (this.calibratedValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.calibratedValue);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.value = null;
      } else {
        this.value = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.calibratedValue = null;
      } else {
        this.calibratedValue = in.readDouble();
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.value = null;
          } else {
            this.value = in.readDouble();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.calibratedValue = null;
          } else {
            this.calibratedValue = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










