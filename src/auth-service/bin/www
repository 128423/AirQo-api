#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
const constants = require("@config/constants");
const middlewareConfig = require("@config/middleware");
var debug = require("debug")("auth-service:server");
var http = require("http");
var isEmpty = require("is-empty");
const log4js = require('log4js');
const log4jsConfiguration = require("@config/log4js")
log4js.configure(log4jsConfiguration);
const logger = log4js.getLogger("start-script");
const { logText, logObject, logElement } = require("@utils/log")


/**
 * KAFKA configuration
 */
const { Kafka } = require("kafkajs");
logObject("KAFKA_BOOTSTRAP_SERVERS", constants.KAFKA_BOOTSTRAP_SERVERS)
const kafka = new Kafka({
    clientId: constants.KAFKA_CLIENT_ID,
    brokers: constants.KAFKA_BOOTSTRAP_SERVERS,
});


/***
 *  make a log directory, just in case it isn't there.
 */

try {
    require('fs').mkdirSync('./log');
} catch (e) {
    if (e.code != 'EEXIST') {
        console.error("Could not set up log directory, error was: ", e);
        process.exit(1);
    }
}


/****
 * pass the app instance to the middleware configuration
 */
try {
    middlewareConfig(app);
} catch (e) {
    logElement("middleware error", e.message)
}


const consumer = kafka.consumer({ groupId: constants.UNIQUE_CONSUMER_GROUP });

// Function to start consuming messages
const run = async() => {
    await consumer.connect();
    await consumer.subscribe({ topic: constants.NEW_MOBILE_APP_USER_TOPIC, fromBeginning: true });
    await consumer.run({
        eachMessage: async({ topic, partition, message }) => {
            logger.info(
                `KAFKA: successfully received the new User --- ${JSON.stringify({
                    value: message.value.toString(),
                })}`
            );
            logObject("message.value.toString()", message.value.toString())
        },
    });
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(constants.PORT);
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
    if (constants.ENVIRONMENT === "STAGING ENVIRONMENT") {
        run().catch(error => {
            logger.error(`KAFKA: internal server error -- ${JSON.stringify(error)}`);
        });
    }
    /**
     * we can also listen for mobile app Firebase new users from here
     */

});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

let ENV = "";
if (isEmpty(process.env.NODE_ENV)) {
    ENV = "production";
} else {
    ENV = process.env.NODE_ENV;
}

function onListening() {
    logText(`server is running on port: ${constants.PORT}`)
    console.log(`The server is running on the ${ENV} environment`)
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}