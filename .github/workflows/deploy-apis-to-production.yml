name: deploy-apis-to-production

on:
  #push:
  pull_request:
    branches: master
    types: [closed]
jobs:
  check:
    if: github.event.pull_request.merged == 'true'
    #if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    name: check changed microservice(s)
    outputs:
      run_auth_service: ${{ steps.check_files.outputs.run_auth_service }} # auth service
      run_device_registry: ${{ steps.check_files.outputs.run_device_registry }} # device registry
      run_device_monitoring: ${{ steps.check_files.outputs.run_device_monitoring }} # device monitoring
      run_data_mgt: ${{ steps.check_files.outputs.run_data_mgt }} # data mgt
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

        #### all microservices ######
      - name: check modified microserivce
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          
          echo "::set-output name=run_auth_service::false"
          echo "::set-output name=run_device_registry::false"  
          echo "::set-output name=run_device_monitoring::false" 
          echo "::set-output name=run_data_mgt::false"

          while IFS= read -r file
          do
            echo $file
            if [[ $file == src/auth-service/* ]]; then
              echo "::set-output name=run_auth_service::true"
            fi

            if [[ $file == src/device-registry/* ]]; then
              echo "::set-output name=run_device_registry::true"
            fi

            if [[ $file == src/device-monitoring/* ]]; then
              echo "::set-output name=run_device_monitoring::true"
            fi

            if [[ $file == src/data-mgt/node/* ]]; then
              echo "::set-output name=run_data_mgt::true"
            fi
          done < files.txt


  ### auth service ###
  auth-service:
    name: build-push-deploy-auth
    needs: check
    if: needs.check.outputs.run_auth == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/auth-service/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-auth-api:latest
      - name: Deploy to K8S
        run: |
          cd k8s/
          kubectl apply -f prod-auth-api.yaml
          kubectl rollout restart deployment/airqo-auth-api -n production

  #### Device Registry ######
  device-registry:
    name: build-push-deploy-device-registry
    needs: check
    if: needs.check.outputs.run_device_registry == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/device-registry/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-registry-api:latest
      - name: Deploy to K8S
        run: |
          cd k8s/
          kubectl apply -f prod-device-registry-api.yaml
          kubectl rollout restart deployment/airqo-device-registry-api -n production
  
  ### device monitoring ###
  device-monitoring:
    name: build-push-deploy-device-monitoring
    needs: check
    if: needs.check.outputs.run_device_monitoring == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/device-monitoring/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:latest .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-device-monitor-api:latest
      - name: Deploy to K8S
        run: |
          cd k8s/
          kubectl apply -f prod-device-monitor-api.yaml
          kubectl rollout restart deployment/airqo-device-monitor-api -n production
  
  ### data-mgt ###
  data-mgt:
    name: build-push-deploy-data-mgt
    needs: check
    if: needs.check.outputs.run_data_mgt == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCR_CONFIG }}

      - name: Login to K8S
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
      
      - name: Build and Push Docker Image
        run: |
          cd src/data-mgt/node/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-data-mgt-api:latest -f .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/airqo-data-mgt-api:latest
      - name: Deploy to K8S
        run: |
          cd k8s/
          kubectl apply -f prod-data-mgt-api.yaml
          kubectl rollout restart deployment/airqo-data-mgt-api -n production